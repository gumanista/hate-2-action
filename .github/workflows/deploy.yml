name: Deploy to Server

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run linter
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          script: |
            export CI_PROJECT_NAME=$(echo ${{ github.repository }} | awk -F / '{print $2}')
            export CI_COMMIT_SHA=${{ github.sha }}
            export REGISTRY_IMAGE=ghcr.io/${{ github.repository }}
            export DEPLOYMENT_BASE="/home/deploy/hate2action/${CI_PROJECT_NAME}"
            export ENVIRONMENT_SLUG="production"
            export DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export API_KEY=${{ secrets.API_KEY }}
            export TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            
            DEPLOY_DIR="${DEPLOYMENT_BASE}/${ENVIRONMENT_SLUG}"
            mkdir -p ${DEPLOY_DIR}
            
            # Create .env file
            cat << EOF > "${DEPLOY_DIR}/.env"
            POSTGRES_USER=${POSTGRES_USER}
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            POSTGRES_DB=${POSTGRES_DB}
            POSTGRES_HOST=db
            POSTGRES_PORT=5432
            API_KEY=${API_KEY}
            TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
            EOF
            
            # Create docker-compose.prod.yml
            cat << EOF > "${DEPLOY_DIR}/docker-compose.prod.yml"
            version: '3.8'
            services:
              db:
                image: pgvector/pgvector:pg15
                env_file: .env
                volumes:
                  - ./.data/postgres:/var/lib/postgresql/data
                networks:
                  - default
              api:
                image: ${REGISTRY_IMAGE}:${CI_COMMIT_SHA}
                env_file: .env
                networks:
                  - default
                  - traefik-public
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=traefik-public"
                  - "traefik.http.routers.${CI_PROJECT_NAME}-${ENVIRONMENT_SLUG}.rule=Host(\`${DOMAIN_NAME}\`)"
                  - "traefik.http.routers.${CI_PROJECT_NAME}-${ENVIRONMENT_SLUG}.entrypoints=websecure"
                  - "traefik.http.routers.${CI_PROJECT_NAME}-${ENVIRONMENT_SLUG}.tls.certresolver=myresolver"
                  - "traefik.http.services.${CI_PROJECT_NAME}-${ENVIRONMENT_SLUG}.loadbalancer.server.port=8000"
                depends_on:
                  - db
              bot:
                image: ${REGISTRY_IMAGE}:${CI_COMMIT_SHA}
                command: python -m server.telegram.bot
                env_file: .env
                networks:
                  - default
                depends_on:
                  - api
            
            networks:
              traefik-public:
                external: true
            EOF
            
            echo "Starting deployment in ${DEPLOY_DIR}"
            cd ${DEPLOY_DIR} && docker-compose -f docker-compose.prod.yml up -d --pull always
            echo "Deployment successful"